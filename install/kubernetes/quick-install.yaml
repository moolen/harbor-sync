apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  labels:
    app: harbor-sync
  name: harborrobotaccounts.crd.harborsync.k8s.io
spec:
  group: crd.harborsync.k8s.io
  names:
    kind: HarborRobotAccount
    listKind: HarborRobotAccountList
    plural: harborrobotaccounts
    singular: harborrobotaccount
  scope: Cluster
  validation:
    openAPIV3Schema:
      description: HarborRobotAccount is the Schema for the harborrobotaccounts API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: HarborRobotAccountSpec defines the desired state of HarborRobotAccount
          properties:
            credential:
              description: RobotAccountCredential holds the robot account name & token
                to access the harbor API
              properties:
                created_at:
                  format: int64
                  type: integer
                name:
                  type: string
                token:
                  type: string
              required:
              - created_at
              - name
              - token
              type: object
          required:
          - credential
          type: object
        status:
          description: HarborRobotAccountStatus defines the observed state of HarborRobotAccount
          properties:
            last_status:
              format: int64
              type: integer
            last_sync:
              format: int64
              type: integer
          required:
          - last_status
          - last_sync
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.5
  creationTimestamp: null
  labels:
    app: harbor-sync
  name: harborsyncs.crd.harborsync.k8s.io
spec:
  group: crd.harborsync.k8s.io
  names:
    kind: HarborSync
    listKind: HarborSyncList
    plural: harborsyncs
    singular: harborsync
  scope: Cluster
  validation:
    openAPIV3Schema:
      description: HarborSync is the Schema for the harborsyncs API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: HarborSyncSpec defines the desired state how should harbor
            projects map to secrets in namespaces
          properties:
            mapping:
              description: The Mapping contains the mapping from project to a secret
                in a namespace
              items:
                description: ProjectMapping defines how projects are mapped to secrets
                  in specific namespaces
                properties:
                  namespace:
                    type: string
                  secret:
                    type: string
                  type:
                    description: MappingType specifies how to map the project into
                      the namespace/secret Only one of the following matching types
                      may be specified. If none of the following types is specified,
                      the default one is Translate.
                    enum:
                    - Translate
                    - Match
                    type: string
                required:
                - namespace
                - secret
                - type
                type: object
              type: array
            name:
              description: ProjectName specifies the project name
              type: string
            pushAccess:
              description: PushAccess allows the robot account to push images, too.
                defaults to false. As of now we can not tell what permissions a robot
                account has. The user has to wait for the next rotation until the
                robot account has the new permissions. Alternatively, you can re-create
                your HarborSync spec. This forces a rotation.
              type: boolean
            robotAccountSuffix:
              description: The RobotAccountSuffix specifies the suffix to use when
                creating a new robot account
              minLength: 4
              type: string
            type:
              description: 'Specifies how to do matching on a harbor project. Valid
                values are: - "Regex" (default): interpret the project name as regular
                expression;'
              enum:
              - Regex
              type: string
            webhook:
              description: Webhook contains a list of endpoints which will be called
                if the robot account changes (e..g automatic rotation, expired account,
                disabled...)
              items:
                description: WebhookConfig defines how to call a webhook
                properties:
                  endpoint:
                    description: Endpoint is a url
                    type: string
                required:
                - endpoint
                type: object
              type: array
          required:
          - name
          - pushAccess
          - robotAccountSuffix
          - type
          type: object
        status:
          description: HarborSyncStatus defines the observed state of HarborSync
          type: object
      type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: harbor-sync
  name: harbor-sync
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  labels:
    app: harbor-sync
  name: harbor-sync
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - delete
  - get
  - patch
  - update
- apiGroups:
  - crd.harborsync.k8s.io
  resources:
  - harborrobotaccounts
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.harborsync.k8s.io
  resources:
  - harborsyncs
  verbs:
  - create
  - delete
  - get
  - list
  - patch
  - update
  - watch
- apiGroups:
  - crd.harborsync.k8s.io
  resources:
  - harborsyncs/status
  verbs:
  - get
  - patch
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app: harbor-sync
  name: harbor-sync-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: harbor-sync
subjects:
- kind: ServiceAccount
  name: harbor-sync
  namespace: default
---
apiVersion: v1
data:
  HARBOR_API_ENDPOINT: http://harbor.example.com
  HARBOR_PASSWORD: Harbor12345
  HARBOR_USERNAME: admin
kind: ConfigMap
metadata:
  labels:
    app: harbor-sync
  name: harbor-sync-config-274c9b6g4c
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: harbor-sync
  name: harbor-sync
spec:
  replicas: 2
  selector:
    matchLabels:
      app: harbor-sync
  template:
    metadata:
      labels:
        app: harbor-sync
    spec:
      containers:
      - args:
        - controller
        - --store=/data
        command:
        - /harbor-sync
        envFrom:
        - configMapRef:
            name: harbor-sync-config-274c9b6g4c
        image: quay.io/moolen/harbor-sync:latest
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 10m
            memory: 20Mi
      serviceAccount: harbor-sync
      terminationGracePeriodSeconds: 10
